extends RigidBody


export var Debug_Mode = false

# controls
export var Receive_Player_Controls = true
export var Controlled_Input_Values = true

export var UseAccelerometreSteering = false
export var SteerSensitivity = 1.0
export var KeyboardSteerSpeed = 0.025
export var KeyboardReturnSpeed = 0.0125
export var KeyboardCompensateSpeed = 0.1

export var SteerAmountDecay = 0.03 # understeer help
export var SteeringAssistance = 0.0
export var SteeringAssistanceAngular = 0.1
export var Assistance_Factor = 40.0

export var OnThrottleRate = 0.2
export var OffThrottleRate = 0.2

export var OnBrakeRate = 0.05
export var OffBrakeRate = 0.1

export var OnHandbrakeRate = 0.2
export var OffHandbrakeRate = 0.2

export var OnClutchRate = 0.2
export var OffClutchRate = 0.2

export var MaxThrottle = 1.0
export var MaxBrake = 1.0
export var MaxHandbrake = 1.0
export var MaxClutch = 1.0

export var Shift_Time = 20
export(int,"Manual + Clutch","Manual","Automatic") var Shift_Assistance = 2
export var Clutch_Release_RPM = 3000.0
export var Speed_Multiplier = 1.0
export(Array, float) var Gear_Speeds = [ 60,90,120,140,160 ]
export var Reverse_Speed = 60

#differentials
export var Implement_Differentials = false

export var Locking = 0.1
export var CoastLocking = 0.0
export var Preload = 0.0

export var Centre_Locking = 0.5
export var Centre_CoastLocking = 0.5
export var Centre_Preload = 0.0

#engine
export var Rev_Rise = 125.0
export var Rev_Drop = 40.0
export var Engine_Torque = 100.0
export var Engine_Braking_Torque = 25.0
export var Clutch_Tol = 150.0
export var MaxRPM = 8000.0
export var IdleRPM = 800.0

#clutch
var ClutchStable = 0.7
var GearRatioRatioThreshold = 150.0
var ThresholdStable = 0.01
var ClutchFloatReduction = 25.0

#forced inductions
export var Forced_Induction_Max_PSI = 9.0 # Maximum air generated by any forced inductions
export var Forced_Induction_Torque_Add = 0.1 # Piston travel distance
#turbo
export var Turbo_Enabled = false # Enables turbo
export var Turbo_Amount = 1 # Turbo power multiplication.
export var Spool_Rate = 2.0 # Higher = Allows more spooling on low RPM
export var Spool_Threshold = 0.1
export var Blowoff_Rate = 0.14
export var Turbo_Efficiency = 0.075
export var Turbo_PSI_Vacuum = 1.0
#supercharger
export var Supercharger_Enabled = false # Enables supercharger
export var Supercharger_RPM_Influence = 1.0
export var Supercharger_Blow_Rate = 35.0
export var Supercharger_Threshold = 6.0

var rpm = 0.0
var rpm_root = 0.0
var resistancerpm = 0.0
var resistancedv = 0.0
var gear = 0
var actualgear = 0
var throttle = 0.0
var cvtaccel = 0.0
var sassistdel = 0
var sassiststep = 0
var clutchin = false
var gasrestricted = false
var revmatch = false
var gaspedal = 0.0
var brakepedal = 0.0
var clutchpedal = 0.0
var clutchpedalreal = 0.0
var steer = 0.0
var steer2 = 0.0
var readout_torque = 0.0
var clutchgrip = 0.0
var assist_influence = 1.0

var brakeline = 0.0
var handbrakepull = 0.0
var dsweight = 0.0
var dsweightrun = 0.0
var diffspeed = 0.0
var diffspeedun = 0.0
var locked = 0.0
var c_locked = 0.0
var wv_difference = 0.0
var rpmforce = 0.0
var turbopsi = 0.0
var scrpm = 0.0
var boosting = 0.0
var rpmcs = 0.0
var rpmcsm = 0.0
var currentstable = 0.0
var steering_geometry = [0.0,0.0]
var resistance = 0.0
var wob = 0.0
var ds_weight = 0.0
var steer_torque = 0.0
var steer_velocity = 0.0
var drivewheels_size = 1.0

var steering_angles = []
var max_steering_angle = 0.0



var pastvelocity = Vector3(0,0,0)
var gforce = Vector3(0,0,0)
var clock_mult = 1.0
var dist = 0.0
var stress = 0.0



var su = false
var sd = false
var gas = false
var brake = false
var handbrake = false
var right = false
var left = false
var clutch = false
var c_pws = []

var velocity = Vector3(0,0,0)
var rvelocity = Vector3(0,0,0)

var stalled = 0.0
var maxspeed = 1000000.0
var maxspeed_prev = 1000000.0

signal is_engine_redlining
signal is_engine_idling

func _ready():
	pass

func bullet_fix():
	var offset = $DRAG_CENTRE.translation
	
	for i in get_children():
		i.translation -= offset

func controls():
	var mouseposx = 0.0
	
	if get_viewport().size.x>0.0:
		mouseposx = get_viewport().get_mouse_position().x/get_viewport().size.x
	
	if Receive_Player_Controls:
		gas = Input.is_action_pressed("gas")
		brake = Input.is_action_pressed("brake")
		su = Input.is_action_just_pressed("shiftup")
		sd = Input.is_action_just_pressed("shiftdown")
		handbrake = Input.is_action_pressed("handbrake")
		
		left = Input.is_action_pressed("left")
		right = Input.is_action_pressed("right")
		
	if Controlled_Input_Values:
		if Shift_Assistance == 2:
			if gas and not gasrestricted and not gear == -1 or brake and gear == -1 or revmatch:
				gaspedal += OnThrottleRate/clock_mult
			else:
				gaspedal -= OffThrottleRate/clock_mult

			if brake and not gear == -1 or gas and gear == -1:
				brakepedal += OnBrakeRate/clock_mult
			else:
				brakepedal -= OffBrakeRate/clock_mult
		else:
			if Shift_Assistance == 0:
				gasrestricted = false
				clutchin = false
				revmatch = false
			
			if gas and not gasrestricted or revmatch:
				gaspedal += OnThrottleRate/clock_mult
			else:
				gaspedal -= OffThrottleRate/clock_mult

			if brake:
				brakepedal += OnBrakeRate/clock_mult
			else:
				brakepedal -= OffBrakeRate/clock_mult

		if handbrake:
			handbrakepull += OnHandbrakeRate/clock_mult
		else:
			handbrakepull -= OffHandbrakeRate/clock_mult

		var siding = abs(velocity.x)

		if velocity.x>0 and steer2>0 or velocity.x<0 and steer2<0:
			 siding = 0.0
			
		var going = velocity.z/(siding +1.0)
		if going<0:
			going = 0

		if UseAccelerometreSteering:
			steer2 = Input.get_accelerometer().x/10.0
			steer2 *= SteerSensitivity
			if steer2>1.0:
				steer2 = 1.0
			elif steer2<-1.0:
				steer2 = -1.0
			
			var s = abs(steer2)*1.0 +0.5
			if s>1:
				s = 1
			
			steer2 *= s

		else:
			if right:
				if steer2>0:
					steer2 += KeyboardSteerSpeed
				else:
					steer2 += KeyboardCompensateSpeed
			elif left:
				if steer2<0:
					steer2 -= KeyboardSteerSpeed
				else:
					steer2 -= KeyboardCompensateSpeed
			else:
				if steer2>KeyboardReturnSpeed:
					steer2 -= KeyboardReturnSpeed
				elif steer2<-KeyboardReturnSpeed:
					steer2 += KeyboardReturnSpeed
				else:
					steer2 = 0.0
				
			if steer2>1.0:
				steer2 = 1.0
			elif steer2<-1.0:
				steer2 = -1.0
				
		if Assistance_Factor>0.0:
			var maxsteer = 1.0/(going*(SteerAmountDecay/deg2rad(Assistance_Factor)) +1.0)
			
			var assist_commence = linear_velocity.length()/10.0
			if assist_commence>1.0:
				assist_commence = 1.0
			
			steer = (steer2*maxsteer) -(velocity.normalized().x*assist_commence)*(SteeringAssistance*deg2rad(Assistance_Factor)) +rvelocity.y*(SteeringAssistanceAngular*deg2rad(Assistance_Factor))
		else:
			steer = steer2
func limits():
	if gaspedal<0.0:
		gaspedal = 0.0
	elif gaspedal>MaxThrottle:
		gaspedal = MaxThrottle

	if brakepedal<0.0:
		brakepedal = 0.0
	elif brakepedal>MaxBrake:
		brakepedal = MaxBrake

	if handbrakepull<0.0:
		handbrakepull = 0.0
	elif handbrakepull>MaxHandbrake:
		handbrakepull = MaxHandbrake

	if steer<-1.0:
		steer = -1.0
	elif steer>1.0:
		steer = 1.0

func transmission():
	
	su = Input.is_action_just_pressed("shiftup")
	sd = Input.is_action_just_pressed("shiftdown")
	
	var clutch = Input.is_action_pressed("clutch")
	if not Shift_Assistance == 0:
		clutch = Input.is_action_pressed("handbrake")
	clutch = not clutch
	
	if clutch and not clutchin:
		clutchpedalreal -= OffClutchRate/clock_mult
	else:
		clutchpedalreal += OnClutchRate/clock_mult

	if clutchpedalreal<0:
		clutchpedalreal = 0
	elif clutchpedalreal>MaxClutch:
		clutchpedalreal = MaxClutch

	clutchpedal = 1.0-clutchpedalreal

	if Shift_Assistance == 0:
		if su:
			su = false
			if gear<len(Gear_Speeds):
				if clutchpedal<0.5:
					actualgear += 1
		if sd:
			sd = false
			if gear>-1:
				if clutchpedal<0.5:
					actualgear -= 1
	elif Shift_Assistance == 1:
		if rpm<Clutch_Release_RPM:
			var irga_ca = (Clutch_Release_RPM-rpm)/(Clutch_Release_RPM-IdleRPM)
			clutchpedalreal = irga_ca*irga_ca
			if clutchpedalreal>1.0:
				clutchpedalreal = 1.0
		else:
			if not gasrestricted and not revmatch:
				clutchin = false
		if su:
			su = false
			if gear<len(Gear_Speeds):
				if rpm<Clutch_Release_RPM:
					actualgear += 1
				else:
					if actualgear<1:
						actualgear += 1
						if rpm>Clutch_Release_RPM:
							clutchin = false
					else:
						if sassistdel>0:
							actualgear += 1
						sassistdel = Shift_Time/2.0
						sassiststep = -4

						clutchin = true
						gasrestricted = true
		elif sd:
			sd = false
			if gear>-1:
				if rpm<Clutch_Release_RPM:
					actualgear -= 1
				else:
					if actualgear == 0 or actualgear == 1:
						actualgear -= 1
						clutchin = false
					else:
						if sassistdel>0:
							actualgear -= 1
						sassistdel = Shift_Time/2.0
						sassiststep = -2

						clutchin = true
						revmatch = true
						gasrestricted = false
	elif Shift_Assistance == 2:
		var assistshiftspeed = ((10000.0-200) *maxspeed)*assist_influence
		var assistdownshiftspeed = ((10000.0-400) *maxspeed_prev)*assist_influence
		if gear == 0:
			 if gas:
				  sassistdel -= 1
				  if sassistdel<0:
					  actualgear = 1
			 elif brake:
				  sassistdel -= 1
				  if sassistdel<0:
					  actualgear = -1
			 else:
				  sassistdel = 60
		elif linear_velocity.length()<5:
			if not gas and gear == 1 or not brake and gear == -1:
				sassistdel = 60
				actualgear = 0
		if sassiststep == 0:
			if rpm<Clutch_Release_RPM:
				var irga_ca = (Clutch_Release_RPM-rpm)/(Clutch_Release_RPM-IdleRPM)
				clutchpedalreal = irga_ca*irga_ca
				if clutchpedalreal>1.0:
					clutchpedalreal = 1.0
			else:
				clutchin = false
			if not gear == -1:
				if gear<len(Gear_Speeds) and linear_velocity.length()>assistshiftspeed:
					sassistdel = Shift_Time/2.0
					sassiststep = -4

					clutchin = true
					gasrestricted = true
				if gear>1 and linear_velocity.length()<assistdownshiftspeed:
					sassistdel = Shift_Time/2.0
					sassiststep = -2

					clutchin = true
					gasrestricted = false
					revmatch = true

	if sassiststep == -4 and sassistdel<0:
		sassistdel = Shift_Time/2
		if gear<len(Gear_Speeds):
			actualgear += 1
		sassiststep = -3
	elif sassiststep == -3 and sassistdel<0:
		if rpm>Clutch_Release_RPM:
			clutchin = false
		if sassistdel<0:
			sassiststep = 0
			gasrestricted = false
	elif sassiststep == -2 and sassistdel<0:
		sassiststep = 0
		if gear>-1:
			actualgear -= 1
		if rpm>Clutch_Release_RPM:
			clutchin = false
		gasrestricted = false
		revmatch = false


	gear = actualgear


	if clutchpedal<0:
		clutchpedal = 0
	elif clutchpedal>1.0:
		clutchpedal = 1.0

func drivetrain():
			
		rpmcsm -= (rpmcs - resistance)

		rpmcs -= rpmcs*(1.0-clutchpedal)
		
		rpmcs -= (rpmcs - resistance)
		
#		torquereadout = multivariate(RiseRPM,TorqueRise,BuildUpTorque,EngineFriction,EngineDrag,OffsetTorque,rpm,DeclineRPM,DeclineRate,FloatRate,turbopsi,TurboAmount,EngineCompressionRatio,TurboEnabled,VVTRPM,VVT_BuildUpTorque,VVT_TorqueRise,VVT_RiseRPM,VVT_OffsetTorque,VVT_FloatRate,VVT_DeclineRPM,VVT_DeclineRate,SuperchargerEnabled,SCRPMInfluence,BlowRate,SCThreshold)
		if gear<0:
			rpm_root -= rpmcs*1.0
		else:
			rpm_root += rpmcs*1.0
						
#		MaxRPM = 12000.0
		
		maxspeed = 1000000.0
		maxspeed_prev = 1000000.0
		
		if gear>0:
			maxspeed = Gear_Speeds[gear-1]
		elif gear<0:
			maxspeed = Reverse_Speed

		if gear>1:
			maxspeed_prev = Gear_Speeds[gear-2]
		elif gear<0:
			maxspeed_prev = Reverse_Speed
		
		maxspeed *= Speed_Multiplier
		maxspeed /= 10000.0
		maxspeed /= 1.10130592
		
		maxspeed_prev *= Speed_Multiplier
		maxspeed_prev /= 10000.0
		maxspeed_prev /= 1.10130592

		var stabled = (1.0/maxspeed)*0.9 +0.1
		ds_weight = 150.0/stabled
		
		if resistance>0.0:
			locked = abs(resistance/ds_weight)*(CoastLocking/100.0) + Preload
		else:
			locked = abs(resistance/ds_weight)*(Locking/100.0) + Preload
		
		if locked<0.0:
			locked = 0.0
		elif locked>1.0:
			locked = 1.0
			
			
		if wv_difference>0.0:
			c_locked = abs(wv_difference)*(Centre_CoastLocking/10.0) + Centre_Preload
		else:
			c_locked = abs(wv_difference)*(Centre_Locking/10.0) + Centre_Preload
		if c_locked<0.0 or len(c_pws)<4:
			c_locked = 0.0
		elif c_locked>1.0:
			c_locked = 1.0
			
		var maxd = VitaVehicleSimulation.fastest_wheel(c_pws)
		var mind = VitaVehicleSimulation.slowest_wheel(c_pws)
		var what = 0.0
		
		var floatreduction = ClutchFloatReduction

		if dsweightrun>0.0:
			floatreduction = ClutchFloatReduction/dsweightrun
		else:
			floatreduction = 0.0
				
		var stabling = -(GearRatioRatioThreshold -(1.0/maxspeed)*drivewheels_size)*ThresholdStable
		if stabling<0.0:
			stabling = 0.0
			
		currentstable = ClutchStable + stabling

		if dsweightrun>0.0:
			currentstable /= dsweightrun/2.0
			what = (rpm_root-(((rpmforce*floatreduction)*pow(currentstable,1.0))/(ds_weight/dsweightrun)))
		else:
			what = rpm_root
			
		if maxd:
			if gear<0.0:
				dist = maxd.wv + what*(maxspeed/maxd.Wheel_Margin)
			else:
				dist = maxd.wv - what*(maxspeed/maxd.Wheel_Margin)
		
		dist *= (clutchpedal*clutchpedal)
		
		if gear == 0:
			dist *= 0.0

		wv_difference = 0.0
		drivewheels_size = 0.0
		if Implement_Differentials:
			for i in c_pws:
				drivewheels_size += i.w_size/len(c_pws)
				i.c_p = i.Power_Bias
				wv_difference += ((i.wv - what*(maxspeed/i.Wheel_Margin))/(len(c_pws)))*(clutchpedal*clutchpedal)
				if gear<0:
					i.dist = dist*(1-c_locked) + (i.wv + what*(maxspeed/i.Wheel_Margin))*c_locked
				else:
					i.dist = dist*(1-c_locked) + (i.wv - what*(maxspeed/i.Wheel_Margin))*c_locked
				if gear == 0:
					i.dist *= 0.0
		else:
			for i in c_pws:
				drivewheels_size += i.w_size/len(c_pws)
				i.c_p = i.Power_Bias
				wv_difference += ((i.wv - what*(maxspeed/i.Wheel_Margin))/(len(c_pws)))*(clutchpedal*clutchpedal)
				if gear<0:
					i.dist = dist*(1-1) + (i.wv + what*(maxspeed/i.Wheel_Margin))*1
				else:
					i.dist = dist*(1-1) + (i.wv - what*(maxspeed/i.Wheel_Margin))*1
				if gear == 0:
					i.dist *= 0.0
		assist_influence = drivewheels_size
		resistance = 0.0
		dsweightrun = dsweight
		dsweight = 0.0
		stress = 0.0

func _physics_process(delta):
	
	if Input.is_action_just_pressed("toggle_debug_mode"):
		if Debug_Mode:
			Debug_Mode = false
		else:
			Debug_Mode = true
	
	velocity = global_transform.basis.orthonormalized().xform_inv(linear_velocity)
	rvelocity = global_transform.basis.orthonormalized().xform_inv(angular_velocity)

	gforce = (linear_velocity - pastvelocity)*((0.30592/9.806)*60.0)
	pastvelocity = linear_velocity

	gforce = global_transform.basis.orthonormalized().xform_inv(gforce)
	
	controls()

	sassistdel -= 1

	transmission()
	
	limits()

	var steeroutput = steer
	
	var uhh = (max_steering_angle/90.0)*(max_steering_angle/90.0)
	uhh *= 0.5	
	steeroutput *= abs(steer)*(uhh) +(1.0-uhh)
	
	brakeline = brakepedal
	
	if brakeline<0.0:
		brakeline = 0.0
	
	throttle = gaspedal

	var stab = 300.0
	var thr = 0.0

	if Turbo_Enabled:
		thr = (throttle-Spool_Threshold)/(1-Spool_Threshold)
			
		if boosting>thr:
			boosting = thr
		else:
			boosting -= (boosting - thr)*Turbo_Efficiency
		 
		turbopsi += (boosting*rpm_root)/((100.0/Spool_Rate)*60.9)

		turbopsi -= turbopsi*Blowoff_Rate
	else:
		turbopsi = 0.0

	if Supercharger_Enabled:
		scrpm = rpm_root*Supercharger_RPM_Influence
		turbopsi += (scrpm/10000.0)*Supercharger_Blow_Rate -Supercharger_Threshold

	turbopsi = clamp(turbopsi,-Turbo_PSI_Vacuum,Forced_Induction_Max_PSI)
	var current_torque = Engine_Torque*(turbopsi*Forced_Induction_Torque_Add +1)

	clutchgrip = (max(current_torque,Engine_Braking_Torque))*1.0 +Clutch_Tol
	
	rpmforce = (-(Rev_Rise/(MaxRPM/10000.0))*throttle +(Rev_Drop/(MaxRPM/10000.0))*(1 -throttle))*(clamp(1.0-clutchpedal +float(gear == 0),0,1))
	rpmforce += ((-current_torque*throttle +Engine_Braking_Torque*(1 -throttle))*(clamp(clutchpedal*clutchpedal -float(gear == 0),0,1)))

	rpm_root -= rpmforce
	if rpm_root>10000.0:
		rpm_root = 10000.0
		emit_signal("is_engine_redlining")
	elif rpm_root<IdleRPM/(MaxRPM/10000.0):
		rpm_root = IdleRPM/(MaxRPM/10000.0)
		emit_signal("is_engine_idling")

	rpm = rpm_root*(MaxRPM/10000.0)

	drivetrain()
	c_pws = []

var front_wheels = []
var rear_wheels = []
var front_load = 0.0
var total = 0.0

var weight_dist = [0.0,0.0]

func _process(delta):

#	var speed_kmh = linear_velocity*1.10130592
#	gforce = (speed_kmh/1.10130592 - pastvelocity)*((0.30592/9.806)*60.0)
#	pastvelocity = speed_kmh/1.10130592
#	gforce /= 60.0*delta

	if Debug_Mode:
		front_wheels = []
		rear_wheels = []
		for i in get_children():
			if "Wheel_Margin" in i:
				if i.translation.z>0:
					front_wheels.append(i)
				else:
					rear_wheels.append(i)
					
		front_load = 0.0
		total = 0.0
		
		for f in front_wheels:
			front_load += f.directional_force.y
			total += f.directional_force.y
		for r in rear_wheels:
			front_load -= r.directional_force.y
			total += r.directional_force.y
			
		if total>0:
			weight_dist[0] = (front_load/total)*0.5 +0.5
			weight_dist[1] = 1.0-weight_dist[0]
	
	
